"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[976],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(b,i(i({ref:t},c),{},{components:n})):r.createElement(b,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4336:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Parte 7 (2 horas)",sidebar_position:9},s=void 0,p={unversionedId:"labs/Laboratorio 1/parte7",id:"version-2021_2/labs/Laboratorio 1/parte7",isDocsHomePage:!1,title:"Parte 7 (2 horas)",description:"A continuaci\xf3n se realizar\xe1 un lexer de un lisp personalizado, que tiene los siguientes tokens:",source:"@site/versioned_docs/version-2021_2/labs/Laboratorio 1/parte7.md",sourceDirName:"labs/Laboratorio 1",slug:"/labs/Laboratorio 1/parte7",permalink:"/docs/2021_2/labs/Laboratorio 1/parte7",editUrl:"https://github.com/compiladores/compiladores.github.io/edit/master/docs/versioned_docs/version-2021_2/labs/Laboratorio 1/parte7.md",tags:[],version:"2021_2",sidebarPosition:9,frontMatter:{title:"Parte 7 (2 horas)",sidebar_position:9},sidebar:"version-2021_2/tutorialSidebar",previous:{title:"Parte 6 (1.5 horas)",permalink:"/docs/2021_2/labs/Laboratorio 1/parte6"},next:{title:"Introducci\xf3n",permalink:"/docs/2021_2/labs/Laboratorio 2/intro"}},c=[{value:"Consigna",id:"consigna",children:[]},{value:"Consejos",id:"consejos",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A continuaci\xf3n se realizar\xe1 un lexer de un lisp personalizado, que tiene los siguientes tokens:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"token"),(0,o.kt)("th",{parentName:"tr",align:null},"definici\xf3n"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"nombre"),(0,o.kt)("td",{parentName:"tr",align:null},"cualquier cadena de letras, n\xfameros, s\xedmbolos o guiones bajos, que no empieza con un n\xfamero")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"n\xfamero"),(0,o.kt)("td",{parentName:"tr",align:null},"secuencia de d\xedgitos decimales")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(")),(0,o.kt)("td",{parentName:"tr",align:null},"iniciar lista")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},")")),(0,o.kt)("td",{parentName:"tr",align:null},"cerrar lista")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"cadena de caracteres encerrados entre comillas dobles, en el cual se puede usar el caracter ",(0,o.kt)("inlineCode",{parentName:"td"},"\\")," para ",(0,o.kt)("em",{parentName:"td"},"escapear")," el caracter contrabarra o el caracter comilla doble.")))),(0,o.kt)("p",null,"El lexer debe ignorar comentarios: desde la ocurrencia de ",(0,o.kt)("inlineCode",{parentName:"p"},"//")," hasta el final de la l\xednea."),(0,o.kt)("h2",{id:"consigna"},"Consigna"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Completar el archivo ",(0,o.kt)("inlineCode",{parentName:"strong"},"Compilisp.jflex")," para que pasen los test del archivo ",(0,o.kt)("inlineCode",{parentName:"strong"},"CompilispTest.java")),". Modificar unicamente ",(0,o.kt)("inlineCode",{parentName:"p"},"Compilisp.jflex"),". En caso de ser necesario agregar m\xe1s tests, hacerlo en un archivo aparte."),(0,o.kt)("h2",{id:"consejos"},"Consejos"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Basarse en el ",(0,o.kt)("a",{parentName:"p",href:"https://www.jflex.de/manual.html#Example"},"ejemplo del manual")," de jflex. Compilisp.jflex va a terminar siendo una versi\xf3n reducida del ejemplo.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Para parsear strings es necesario usar la opci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"%state"),", y varias m\xe1s.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Tambi\xe9n ser\xe1 necesario usar la sintaxis ",(0,o.kt)("inlineCode",{parentName:"p"},"<STATE> regex action"),", que se puede usar tambi\xe9n de la siguiente forma:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"<STATE> regex1 action1\n<STATE> regex2 action2\n<STATE> regex3 action3\n")),(0,o.kt)("p",{parentName:"li"},"  equivale a "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"<STATE> {\n    regex1 action1\n    regex2 action2\n    regex3 action3\n}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"En este lenguaje es necesario devolver un ",(0,o.kt)("inlineCode",{parentName:"p"},"Token<T>")," como en los primeros, ya que es necesario devolver al mismo tiempo el ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenType")," y el contenido del string."))))}d.isMDXComponent=!0}}]);
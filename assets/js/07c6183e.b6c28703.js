"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1639],{3905:function(e,a,t){t.d(a,{Zo:function(){return p},kt:function(){return N}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),l=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},p=function(e){var a=l(e.components);return n.createElement(m.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(t),N=r,u=d["".concat(m,".").concat(N)]||d[N]||c[N]||i;return t?n.createElement(u,s(s({ref:a},p),{},{components:t})):n.createElement(u,s({ref:a},p))}));function N(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var m in a)hasOwnProperty.call(a,m)&&(o[m]=a[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6526:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return o},contentTitle:function(){return m},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=t(7462),r=t(3366),i=(t(7294),t(3905)),s=["components"],o={title:"Generadores de Analizadores Sint\xe1cticos",sidebar_position:5},m=void 0,l={unversionedId:"teoricas/analisis-sintactico/generadores",id:"teoricas/analisis-sintactico/generadores",isDocsHomePage:!1,title:"Generadores de Analizadores Sint\xe1cticos",description:"Generadores de Analizadores Sint\xe1cticos",source:"@site/docs/teoricas/04-analisis-sintactico/05-generadores.md",sourceDirName:"teoricas/04-analisis-sintactico",slug:"/teoricas/analisis-sintactico/generadores",permalink:"/teo/docs/teoricas/analisis-sintactico/generadores",editUrl:"https://github.com/compiladores/compiladores.github.io/edit/master/docs/docs/teoricas/04-analisis-sintactico/05-generadores.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Generadores de Analizadores Sint\xe1cticos",sidebar_position:5},sidebar:"teoricaSidebar",previous:{title:"Analizadores Sint\xe1cticos",permalink:"/teo/docs/teoricas/analisis-sintactico/analisis-sintactico-lr"},next:{title:"Analisis Semantico",permalink:"/teo/docs/teoricas/analisis-semantico/analisis-semantico-1"}},p=[{value:"Generadores de Analizadores Sint\xe1cticos",id:"generadores-de-analizadores-sint\xe1cticos",children:[]}],c={toc:p};function d(e){var a=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"generadores-de-analizadores-sint\xe1cticos"},"Generadores de Analizadores Sint\xe1cticos"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Yacc"),(0,i.kt)("p",{parentName:"li"},"Yacc (Yet Another Compiler Compiler) esta herramienta permite especificar una gram\xe1tica (libre de contexto) y genera un analizador sint\xe1ctico que ",(0,i.kt)("strong",{parentName:"p"},"reconoce")," oraciones validas de dicha gram\xe1tica."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Yacc y Lex trabajan juntos:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lex: Realiza el an\xe1lisis lexicogr\xe1fico.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Dado un stream de caracteres devuelve un stream de palabras clasificadas o tokens.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Se definen en un archivo expresiones regulares y para cada expresi\xf3n regular se escribe una o un conjunto de acciones asociadas a esa expresi\xf3n regular:"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-C"},"\n[a-zA-Z][a-zA-Z0-9]+  {return COMMAND}\n\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Lex toma un archivo de entrada, ",(0,i.kt)("strong",{parentName:"li"},"un stream de caracteres")," transforma en un archivo de salida, ",(0,i.kt)("strong",{parentName:"li"},"un stream de trokens")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Yacc: Yet Another Compiler Compiler"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  - Yacc genera un parser y un analizador sem\xe1ntico que generan el parseo y el correspondiente an\xe1lisis, sobre el stream de tokens que produce lex. A medida que se est\xe1 generando el an\xe1lisis sint\xe1ctico va armando el **\xc1rbol de Parsing** y tambi\xe9n se puede realizar cierto an\xe1lisis sem\xe1ntico con la misma herramienta.\n\n    \n\n  -   Bison: Esta herramienta es la versi\xf3n de GNU, que es compatible con Yacc, pero adem\xe1s hace otras muchas cosas.\n\n  <img src="../images/yacc1.png" alt="img" style="zoom:200%;" />\n\n  El input de yacc es una **gram\xe1tica libre de contexto**, el analizador sint\xe1ctico generado va a construir un **\xe1rbol de parsing**.\n\n  <img src="../images/yacc2.png" alt="img" style="zoom:200%;" />\n\n  -   mylang.y: define la gram\xe1tica del lenguaje. Se puede definir tokens, tipos de tokens y eso se guarda en y.tab.h\n\n  Una vez que se tienen definidos ambos archivos el de la gram\xe1tica y el del analizador l\xe9xico, se compilan para generar o el interprete o el compilador.\n\n  <img src="../images/yacc2.png" alt="img" style="zoom:200%;" />\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Un Archivo YACC"),(0,i.kt)("p",{parentName:"li"},"La estructura de un archivo Yacc es muy similar a la estructura de los achivos lex:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Primera Parte\n%%\n producci\xf3n   {accion}\n%%\nTercera Parte\n")),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Primera Parte"),(0,i.kt)("p",{parentName:"li"},"La primera parte del archivo de Yacc contiene:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Declaraciones en C que est\xe1n delimitadas por %{%}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Definiciones espec\xedficas de Yacc"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"%start"),(0,i.kt)("li",{parentName:"ul"},"%token"),(0,i.kt)("li",{parentName:"ul"},"%union (tokens de diferente tipos)"),(0,i.kt)("li",{parentName:"ul"},"%type (el tipo que puede tomar un token)"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Producciones"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"La secci\xf3n del medio representa la gram\xe1tica.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"las acciones asociadas a una producci\xf3n ven entre {}"))),(0,i.kt)("p",{parentName:"li"},"Ejemplo:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-C"},'\nstatements: statement             {printf("statement");}\n          | statement statements  {printf("statements \\n");}\n          ;\n\nstatement: identifier \'+\' identifier {printf("suma"); }\n\nstatement: identifier \'-\' identifier {printf("resta"); }\n\n')),(0,i.kt)("p",{parentName:"li"},"Un aspecto interesante de las producciones es que Yacc permite acceder a los valores que est\xe1n asociados con los s\xedmbolos de las producciones:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"$1, $2, $3, ","\u2026"," $N : se refieren a los valores de los s\xedmbolos asociados a las producciones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("div",{parentName:"li",className:"math math-display"},(0,i.kt)("span",{parentName:"div",className:"katex-display"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"e"),(0,i.kt)("mi",{parentName:"mrow"},"s"),(0,i.kt)("mi",{parentName:"mrow"},"e"),(0,i.kt)("mi",{parentName:"mrow"},"l"),(0,i.kt)("mi",{parentName:"mrow"},"v"),(0,i.kt)("mi",{parentName:"mrow"},"a"),(0,i.kt)("mi",{parentName:"mrow"},"l"),(0,i.kt)("mi",{parentName:"mrow"},"o"),(0,i.kt)("mi",{parentName:"mrow"},"r"),(0,i.kt)("mi",{parentName:"mrow"},"a"),(0,i.kt)("mi",{parentName:"mrow"},"s"),(0,i.kt)("mi",{parentName:"mrow"},"o"),(0,i.kt)("mi",{parentName:"mrow"},"c"),(0,i.kt)("mi",{parentName:"mrow"},"i"),(0,i.kt)("mi",{parentName:"mrow"},"a"),(0,i.kt)("mi",{parentName:"mrow"},"d"),(0,i.kt)("mi",{parentName:"mrow"},"o"),(0,i.kt)("mi",{parentName:"mrow"},"a"),(0,i.kt)("mi",{parentName:"mrow"},"l"),(0,i.kt)("mi",{parentName:"mrow"},"L"),(0,i.kt)("mi",{parentName:"mrow"},"H"),(0,i.kt)("mi",{parentName:"mrow"},"S")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"es el valor asociado al LHS")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"L"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.08125em"}},"H"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S"))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Todos los s\xedmbolos tienen un valor asociado, sean terminales o no terminales.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"La asociaci\xf3n por defecto es $$=$1"))),(0,i.kt)("p",{parentName:"li"},"Entonces se puede escribir:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-C"},"statement: identifier '+' identifier {$$ = $1 + $3; }\n\nstatement: identifier '-' identifier {$$ = $1 - $3; }\n")),(0,i.kt)("p",{parentName:"li"},"Representan la sem\xe1ntica de la producci\xf3n.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Manos a la Obra"),(0,i.kt)("p",{parentName:"li"},"En este ejemplo se desarrolla una calculadora muy b\xe1sica"),(0,i.kt)("p",{parentName:"li"},"mi gram\xe1tica:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"instruccion -> NOMBRE '=' expresion\n         | expresion\n\n\nexpresion: -> NUMERO '+' NUMERO\n        | NUMERO '-' NUMERO\n        | NUMERO\n")),(0,i.kt)("p",{parentName:"li"},"Caracter\xedsticas:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reconocer las operaciones"),(0,i.kt)("li",{parentName:"ul"},"Evaluar los resultados")),(0,i.kt)("p",{parentName:"li"},"mi","_","lenguaje.y:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-C"},"%{\n#include<stdio.h>\n\nextern int yylex(void);\nextern char * yytext;\nvoid yyerror(char * s);\n\n}%\n%token NOMBRE NUMERO\n%%\ninstruccion: NOMBRE '=' expresion\n       | expresion             {printf(\"= %d\\n\",$1);}\n       ;\n\nexpresion: NUMERO '+' NUMERO   {$$ = $1 + $3;}\n     | NUMERO '-' NUMERO   {$$ = $1 - $3;}\n     | NUMERO              {$$ = $1;}\n     ;\n%%\nvoid yyerror (char *s){\n   printf(\"%s\",s);\n}\n\n\nint main(){\n   yyparse();\n   return 0;\n}\n\n")),(0,i.kt)("p",{parentName:"li"},"mi","_","lenguaje.l:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-C"},'%{\n#include<stdlib.h>    \n#include "y.tab.h"\nextern int yylval;\n%}\n\n%% \n[0-9]+       { yylval=atoi(yytext); return NUMERO;}\n[ \\t] ;\n\\n           return 0;   //EOF  \n.            return yytext[0];\n%%\n')))))}d.isMDXComponent=!0}}]);
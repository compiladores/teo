"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2599],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return c}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),p=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=n,k=u["".concat(d,".").concat(c)]||u[c]||m[c]||o;return a?r.createElement(k,i(i({ref:t},s),{},{components:a})):r.createElement(k,i({ref:t},s))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6535:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var r=a(7462),n=a(3366),o=(a(7294),a(3905)),i=["components"],l={title:"Parte 2 (0.5 horas)",sidebar_position:3},d=void 0,p={unversionedId:"labs/Laboratorio 1/parte2",id:"version-2021_2/labs/Laboratorio 1/parte2",isDocsHomePage:!1,title:"Parte 2 (0.5 horas)",description:"\xbfC\xf3mo derivar un programa a partir de un listado de regexes?",source:"@site/versioned_docs/version-2021_2/labs/Laboratorio 1/parte2.md",sourceDirName:"labs/Laboratorio 1",slug:"/labs/Laboratorio 1/parte2",permalink:"/docs/2021_2/labs/Laboratorio 1/parte2",editUrl:"https://github.com/compiladores/compiladores.github.io/edit/master/docs/versioned_docs/version-2021_2/labs/Laboratorio 1/parte2.md",tags:[],version:"2021_2",sidebarPosition:3,frontMatter:{title:"Parte 2 (0.5 horas)",sidebar_position:3},sidebar:"version-2021_2/tutorialSidebar",previous:{title:"Parte 1 (0.5 horas)",permalink:"/docs/2021_2/labs/Laboratorio 1/parte1"},next:{title:"Parte 3 (2 horas)",permalink:"/docs/2021_2/labs/Laboratorio 1/parte3"}},s=[{value:"\xbfC\xf3mo derivar un programa a partir de un listado de regexes?",id:"c\xf3mo-derivar-un-programa-a-partir-de-un-listado-de-regexes",children:[{value:"Ambig\xfcedades",id:"ambig\xfcedades",children:[]}]},{value:"C\xf3mo graficar",id:"c\xf3mo-graficar",children:[]},{value:"Consigna",id:"consigna",children:[{value:"Brainfuck adder",id:"brainfuck-adder",children:[]},{value:"English Commander",id:"english-commander",children:[]},{value:"Numbersoup",id:"numbersoup",children:[]},{value:"LOL",id:"lol",children:[]}]}],m={toc:s};function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"c\xf3mo-derivar-un-programa-a-partir-de-un-listado-de-regexes"},"\xbfC\xf3mo derivar un programa a partir de un listado de regexes?"),(0,o.kt)("p",null,"Es posible convertir el listado de expresiones regulares en un ",(0,o.kt)("em",{parentName:"p"},"aut\xf3mata finito determin\xedstico")," (DFA). Tal como descripto en Tiger 2.4 y Dragon 3.7, cada expresi\xf3n regular se convierte en un ",(0,o.kt)("em",{parentName:"p"},"aut\xf3mata finito no determin\xedstico")," (NFA) de forma directa. Luego se combinan los NFA en un \xfanico NFA, que se convierte a un DFA por medio de un algoritmo."),(0,o.kt)("h3",{id:"ambig\xfcedades"},"Ambig\xfcedades"),(0,o.kt)("p",null,"Algunos strings pueden interpretarse como m\xe1s de un tipo de token. Por ejemplo, en C, la secuencia de caracteres ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," podr\xeda interpretarse como una variable, ya que est\xe1 compuesta de caracteres alfanum\xe9ricos y no inicia con un n\xfamero. Sin embargo, el lexer de C la interpreta como un token. Esto sucede porque los keywords tienen mayor prioridad que las variables. En los ejerc\xedcios de esta secci\xf3n, los tokens est\xe1n ordenados de m\xe1s prioritario a menos prioritario. Por ejemplo en el caso de English Commander, ",(0,o.kt)("inlineCode",{parentName:"p"},"DO")," es un DO pero no una palabra; en Numbersoup ",(0,o.kt)("inlineCode",{parentName:"p"},"0110")," es un BIN pero no un BINHEX."),(0,o.kt)("h2",{id:"c\xf3mo-graficar"},"C\xf3mo graficar"),(0,o.kt)("p",null,"No es necesario incluir el estado muerto ni el estado inv\xe1lido ni las transiciones a los mismos. Al respecto de esto, seguir la figura 2.7 del tiger book, que representa el DFA abusando la notaci\xf3n. Recomendamos evitar incluir estos estados (ni las transiciones correspondientes) para que el diagrama sea m\xe1s claro y sencillo."),(0,o.kt)("h2",{id:"consigna"},"Consigna"),(0,o.kt)("p",null,"Dise\xf1ar el diagrama de los DFA correspondientes a los lenguajes descriptos a continuaci\xf3n. Se recomienda usar draw.io ."),(0,o.kt)("h3",{id:"brainfuck-adder"},"Brainfuck adder"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Descripcion informal"),(0,o.kt)("th",{parentName:"tr",align:null},"tipo de token"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"signo ",(0,o.kt)("inlineCode",{parentName:"td"},"+")),(0,o.kt)("td",{parentName:"tr",align:null},"suma")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"signo ",(0,o.kt)("inlineCode",{parentName:"td"},"-")),(0,o.kt)("td",{parentName:"tr",align:null},"resta")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"secuencia de signos ",(0,o.kt)("inlineCode",{parentName:"td"},"+")," y ",(0,o.kt)("inlineCode",{parentName:"td"},"-")),(0,o.kt)("td",{parentName:"tr",align:null},"n\xfamero entero")))),(0,o.kt)("h3",{id:"english-commander"},"English Commander"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Descripcion informal"),(0,o.kt)("th",{parentName:"tr",align:null},"tipo de token"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"palabra ",(0,o.kt)("inlineCode",{parentName:"td"},"DO")),(0,o.kt)("td",{parentName:"tr",align:null},"DO")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"palabra ",(0,o.kt)("inlineCode",{parentName:"td"},"DON")),(0,o.kt)("td",{parentName:"tr",align:null},"DON")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"palabra ",(0,o.kt)("inlineCode",{parentName:"td"},"DONE")),(0,o.kt)("td",{parentName:"tr",align:null},"DONE")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"cualquier palabra"),(0,o.kt)("td",{parentName:"tr",align:null},"palabra")))),(0,o.kt)("h3",{id:"numbersoup"},"Numbersoup"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Descripcion informal"),(0,o.kt)("th",{parentName:"tr",align:null},"tipo de token"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"n\xfamero binario"),(0,o.kt)("td",{parentName:"tr",align:null},"BIN")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"n\xfamero decimal"),(0,o.kt)("td",{parentName:"tr",align:null},"DEC")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"n\xfamero hexadecimal"),(0,o.kt)("td",{parentName:"tr",align:null},"HEX")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"n\xfamero hexadecimal seguido de ",(0,o.kt)("inlineCode",{parentName:"td"},"x")," seguido de un n\xfamero binario"),(0,o.kt)("td",{parentName:"tr",align:null},"BINHEX")))),(0,o.kt)("h3",{id:"lol"},"LOL"),(0,o.kt)("p",null,"Ejemplos"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"PARARARARA LOLOLOLOLO LIRIRIRIRILILI PEPEPE\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"PA PE LI LO RI\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Descripcion informal"),(0,o.kt)("th",{parentName:"tr",align:null},"tipo de token"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Palabra compuesta por las s\xedlabas ",(0,o.kt)("inlineCode",{parentName:"td"},"PA")," y/o ",(0,o.kt)("inlineCode",{parentName:"td"},"RA")),(0,o.kt)("td",{parentName:"tr",align:null},"#A")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Palabra compuesta por las s\xedlabas ",(0,o.kt)("inlineCode",{parentName:"td"},"PE")),(0,o.kt)("td",{parentName:"tr",align:null},"#E")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Palabra compuesta por las s\xedlabas ",(0,o.kt)("inlineCode",{parentName:"td"},"RI")," y/o ",(0,o.kt)("inlineCode",{parentName:"td"},"LI")),(0,o.kt)("td",{parentName:"tr",align:null},"#I")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Palabra compuesta por las s\xedlabas ",(0,o.kt)("inlineCode",{parentName:"td"},"LO")),(0,o.kt)("td",{parentName:"tr",align:null},"#O")))))}u.isMDXComponent=!0}}]);
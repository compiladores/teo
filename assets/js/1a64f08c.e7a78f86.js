"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[443],{3905:function(e,a,n){n.d(a,{Zo:function(){return c},kt:function(){return u}});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,k=m["".concat(s,".").concat(u)]||m[u]||d[u]||r;return n?t.createElement(k,o(o({ref:a},c),{},{components:n})):t.createElement(k,o({ref:a},c))}));function u(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6090:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var t=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={sidebar_position:4},s="Trabajo pr\xe1ctico",p={unversionedId:"labs/Trabajo Pr\xe1ctico",id:"version-2021_2/labs/Trabajo Pr\xe1ctico",isDocsHomePage:!1,title:"Trabajo pr\xe1ctico",description:"El objetivo de este trabajo pr\xe1ctico es la construcci\xf3n de un compilador completo.",source:"@site/versioned_docs/version-2021_2/labs/Trabajo Pr\xe1ctico.md",sourceDirName:"labs",slug:"/labs/Trabajo Pr\xe1ctico",permalink:"/docs/2021_2/labs/Trabajo Pr\xe1ctico",editUrl:"https://github.com/compiladores/compiladores.github.io/edit/master/docs/versioned_docs/version-2021_2/labs/Trabajo Pr\xe1ctico.md",tags:[],version:"2021_2",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"version-2021_2/tutorialSidebar",next:{title:"Introducci\xf3n",permalink:"/docs/2021_2/labs/Laboratorio 1/intro"}},c=[{value:"Alcance",id:"alcance",children:[{value:"Diferencias entre Compischeme y Compischeme 2",id:"diferencias-entre-compischeme-y-compischeme-2",children:[]},{value:"Parser y lexer",id:"parser-y-lexer",children:[]},{value:"Suite de tests",id:"suite-de-tests",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Funciones",id:"funciones",children:[]}]},{value:"Resumen",id:"resumen",children:[]},{value:"Criterios de evaluaci\xf3n",id:"criterios-de-evaluaci\xf3n",children:[]}],d={toc:c};function m(e){var a=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"trabajo-pr\xe1ctico"},"Trabajo pr\xe1ctico"),(0,r.kt)("p",null,"El objetivo de este trabajo pr\xe1ctico es la construcci\xf3n de un compilador completo."),(0,r.kt)("h2",{id:"alcance"},"Alcance"),(0,r.kt)("p",null,"Se debe desarrollar un traductor de ",(0,r.kt)("strong",{parentName:"p"},"Compischeme 2")," a assembly x86 compatible con ",(0,r.kt)("inlineCode",{parentName:"p"},"nasm"),", acompa\xf1ado de una suite de tests autom\xe1ticos. ",(0,r.kt)("strong",{parentName:"p"},"Compischeme 2")," es una versi\xf3n de Compischeme m\xe1s amistosa para ser compilada, m\xe1s similar a C."),(0,r.kt)("h3",{id:"diferencias-entre-compischeme-y-compischeme-2"},"Diferencias entre Compischeme y Compischeme 2"),(0,r.kt)("h4",{id:"tipos-de-datos-y-cierres"},"Tipos de datos y cierres"),(0,r.kt)("p",null,"Compischeme s\xf3lo tiene variables num\xe9ricas ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("strong",{parentName:"p"},"no incluye listas, strings ni funciones como tipo de dato"),". Las funciones unicamente se pueden crear adentro de ",(0,r.kt)("inlineCode",{parentName:"p"},"define"),": no se pueden pasar como par\xe1metro ni asignar a una variable local. N\xf3tese que esta es una restricci\xf3n a\xfan m\xe1s fuerte que la que existe en C, que s\xed permite asignar apuntadores a funciones. Como consecuencia de esto, ",(0,r.kt)("strong",{parentName:"p"},"no incluye cierres"),"."),(0,r.kt)("h4",{id:"nueva-sintaxis-define"},"Nueva sintaxis: ",(0,r.kt)("inlineCode",{parentName:"h4"},"define")),(0,r.kt)("p",null,"Hace una definici\xf3n global. Compischeme no inclu\xeda esta funci\xf3n, sino unicamente definiciones locales con ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),". Hay 2 tipos de usos de ",(0,r.kt)("inlineCode",{parentName:"p"},"define"),": "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Definir variables globales: ",(0,r.kt)("strong",{parentName:"li"},"Ejemplo:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"(define x 5)")," asigna 5 a ",(0,r.kt)("inlineCode",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},"Definir funciones: ",(0,r.kt)("strong",{parentName:"li"},"Ejemplo:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"( define inc (lambda (x) (+ x 1)) )"))),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Todos los usos de ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," que no est\xe9n dentro de ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," ser\xe1n inv\xe1lidas"))),(0,r.kt)("h4",{id:"nueva-sintaxis-display"},"Nueva sintaxis: ",(0,r.kt)("inlineCode",{parentName:"h4"},"display")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"display")," muestra el contenido de una variable por ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),". ",(0,r.kt)("strong",{parentName:"p"},"Ejemplo:"),"  ",(0,r.kt)("inlineCode",{parentName:"p"},"(display x)")," imprime el contenido de ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," por ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),"."),(0,r.kt)("h4",{id:"nueva-sintaxis-print"},"Nueva sintaxis: ",(0,r.kt)("inlineCode",{parentName:"h4"},"print")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"print")," muestra un texto ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),". N\xf3tese que Compischeme 2 no tiene un tipo de dato ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", sino que el texto siempre debe incluirse como literal. ",(0,r.kt)("strong",{parentName:"p"},"Ejemplo:"),"  ",(0,r.kt)("inlineCode",{parentName:"p"},'(print "hola")')," imprime ",(0,r.kt)("inlineCode",{parentName:"p"},"hola")," por ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),"."),(0,r.kt)("h4",{id:"nueva-sintaxis-read"},"Nueva sintaxis: ",(0,r.kt)("inlineCode",{parentName:"h4"},"read")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"read")," lee un n\xfamero de stdin y devuelve su valor. ",(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"(  display ( + (read) (read) )  )")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Se recomienda usar el ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/compiladores/esqueleto-assembler"},"repo ",(0,r.kt)("inlineCode",{parentName:"a"},"esqueleto-assembler"))," para ver implementaciones posibles de ",(0,r.kt)("inlineCode",{parentName:"p"},"display"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"print")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"read"),"."))),(0,r.kt)("h3",{id:"parser-y-lexer"},"Parser y lexer"),(0,r.kt)("p",null,"Hay 2 alternativas para realizar el parser y el lexer:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Aprovechar el parser y lexer del laboratorio 3, agreg\xe1ndole la nueva sintaxis ",(0,r.kt)("strong",{parentName:"li"},"(Se recomienda hacer esto)"),"."),(0,r.kt)("li",{parentName:"ol"},"Utilizar ANTLR para lexer y parser.")),(0,r.kt)("h3",{id:"suite-de-tests"},"Suite de tests"),(0,r.kt)("p",null,'El alcance de este trabajo pr\xe1ctico incluye pruebas autom\xe1ticas, cuyo peso en la nota es 5 de 10 puntos. Se deben escribir pruebas al nivel de unit tests y pruebas de integraci\xf3n. Puede ser una buena idea usar mocks para aislar la clase testeada, junto con inyecci\xf3n de dependencia. No es necesario usar alg\xfan framework para realizar inyecci\xf3n de dependencia sino que pueden hacerlo "a mano" en los constructores.'),(0,r.kt)("p",null,"Las pruebas de integraci\xf3n deben invocar al compilador, enviarle datos al programa compilado por ",(0,r.kt)("inlineCode",{parentName:"p"},"stdin")," y extraer datos por ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout")," para ejecutar aserciones. Para los tests de integraci\xf3n, se recomienda usar python y el ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/subprocess.html"},"m\xf3dulo subprocess"),"."),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Las variables se almacenar\xe1n en la secci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),", tal como se hace en la invocaci\xf3n de la funci\xf3n de ",(0,r.kt)("inlineCode",{parentName:"p"},"scanf")," del ejemplo (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/compiladores/esqueleto-assembler/blob/9f0118353236c0058bc60accb1c37bd25c4c8645/7.scanf.asm#L16"},"la l\xednea 16")," guarda espacio para una variable en el data). En el ejemplo, la funci\xf3n de ",(0,r.kt)("inlineCode",{parentName:"p"},"glib")," escribe a ",(0,r.kt)("inlineCode",{parentName:"p"},"fgets_buffer"),", pero se pueden usar los corchetes para escribir a memoria o leer de memoria usando la instrucci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"mov"),", tal como se realiza en la ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/compiladores/esqueleto-assembler/blob/9f0118353236c0058bc60accb1c37bd25c4c8645/7.scanf.asm#L48"},"l\xednea 48"),"."),(0,r.kt)("h3",{id:"funciones"},"Funciones"),(0,r.kt)("p",null,"Las funciones deben usar las instrucciones ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"ret"),". No es necesario pasar los par\xe1metros por el stack ni usando la ABI que se describi\xf3 en la clase de assembler. Ya que cada variable tiene su lugar en la secci\xf3n data, para pasar argumentos unicamente se deben copiar valores entre direcciones de la secci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),". Usar menos espacio en la secci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," o el aprovechamiento del stack para pasaje de argumentos se considera una optimizaci\xf3n."),(0,r.kt)("h2",{id:"resumen"},"Resumen"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Deber\xe1n usar ANTLR para parser y lexer, \xf3 reutilizar el combo bison + flex"),(0,r.kt)("li",{parentName:"ul"},"Deber\xe1n implementar el TP usando java."),(0,r.kt)("li",{parentName:"ul"},"Deber\xe1n compilar ",(0,r.kt)("strong",{parentName:"li"},"Compischeme 2"),", una versi\xf3n modificada del lenguaje del lab 3. Al contrario de compischeme, no van a tener:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"tipos de datos que no sean n\xfameros"),(0,r.kt)("li",{parentName:"ul"},"closures (cierres \xf3 clausuras)"),(0,r.kt)("li",{parentName:"ul"},"nueva sintaxis: ",(0,r.kt)("inlineCode",{parentName:"li"},"(define x 5)")," define una variable global con el valor 5. Al asignarle un lambda, esto equivale a una definici\xf3n de funci\xf3n de C. S\xf3lo puede haber ",(0,r.kt)("inlineCode",{parentName:"li"},"define")," en el scope global de los archivos de ",(0,r.kt)("strong",{parentName:"li"},"Compischeme 2"),"."),(0,r.kt)("li",{parentName:"ul"},"nueva funci\xf3n: ",(0,r.kt)("inlineCode",{parentName:"li"},"(display x)")," muestra el contenido de ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," por stdout."),(0,r.kt)("li",{parentName:"ul"},"nueva sintaxis: ",(0,r.kt)("inlineCode",{parentName:"li"},'(print "texto")')," muestra el texto por stdout (no es una variable string)."),(0,r.kt)("li",{parentName:"ul"},"nueva funci\xf3n: ",(0,r.kt)("inlineCode",{parentName:"li"},"(read)")," lee un n\xfamero de stdin y lo devuelve"))),(0,r.kt)("li",{parentName:"ul"},"Las variables se almacenar\xe1n en la secci\xf3n ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," y no en el stack, tal como en la pr\xe1ctica de assembly. As\xed, cada variable (local o global) tiene su lugar en la secci\xf3n ",(0,r.kt)("inlineCode",{parentName:"li"},"data"),".")),(0,r.kt)("h2",{id:"criterios-de-evaluaci\xf3n"},"Criterios de evaluaci\xf3n"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"5 puntos: implementaci\xf3n. Puntos positivos para la implementaci\xf3n:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"implementaci\xf3n realizada: 2 puntos"),(0,r.kt)("li",{parentName:"ul"},"El c\xf3digo muestra separation of concerns: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"alguna SoC: 1 punto"),(0,r.kt)("li",{parentName:"ul"},"buena SoC: 2 punto"))),(0,r.kt)("li",{parentName:"ul"},"Se utiliza alg\xfan tipo de inyecci\xf3n de dependencia para hacer que las clases sean facilmente testeables: 1 punto"))),(0,r.kt)("li",{parentName:"ul"},"5 puntos: testing. Puntos positivos para la implementaci\xf3n:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"presencia de tests de integraci\xf3n donde se pruebe la ejecuci\xf3n de archivos compischeme: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"entre 4 y 7 programas de 10 l\xedneas o m\xe1s: 2 puntos"),(0,r.kt)("li",{parentName:"ul"},"8 o m\xe1s programas de 10 l\xedneas o m\xe1s: 3 puntos"))),(0,r.kt)("li",{parentName:"ul"},"tests que no sean de integraci\xf3n:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"se testea 1 clase: 1 punto"),(0,r.kt)("li",{parentName:"ul"},"se testean 2 clases o m\xe1s: 2 puntos")))))))}m.isMDXComponent=!0}}]);
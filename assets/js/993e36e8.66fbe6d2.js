"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[651],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,k=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},7108:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],l={},s="Laboratorio 2: Lexers",c={unversionedId:"labs/2",id:"labs/2",isDocsHomePage:!1,title:"Laboratorio 2: Lexers",description:"Para m\xe1s detalles, visitar",source:"@site/docs/labs/2.md",sourceDirName:"labs",slug:"/labs/2",permalink:"/docs/labs/2",editUrl:"https://github.com/compiladores/compiladores.github.io/edit/master/docs/docs/labs/2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Laboratorio 1: automatas",permalink:"/docs/labs/1"},next:{title:"Laboratorio 3: Parser descendiente recursivo de LUA",permalink:"/docs/labs/3"}},d=[{value:"Quickstart",id:"quickstart",children:[{value:"Editor",id:"editor",children:[]},{value:"Deno",id:"deno",children:[]},{value:"Dependencias",id:"dependencias",children:[]},{value:"C\xf3mo hacer el laboratorio",id:"c\xf3mo-hacer-el-laboratorio",children:[]},{value:"Criterios de evaluaci\xf3n",id:"criterios-de-evaluaci\xf3n",children:[]}]}],u={toc:d};function p(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"laboratorio-2-lexers"},"Laboratorio 2: Lexers"),(0,o.kt)("p",null,"Para m\xe1s detalles, visitar\n",(0,o.kt)("a",{parentName:"p",href:"https://compiladores.github.io"},"compiladores.github.io"),"."),(0,o.kt)("h2",{id:"quickstart"},"Quickstart"),(0,o.kt)("h3",{id:"editor"},"Editor"),(0,o.kt)("p",null,"Se recomienda usar vscode y la extensi\xf3n para deno. Para esto apretar ",(0,o.kt)("inlineCode",{parentName:"p"},"Ctrl+P")," y\nluego pegar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ext install denoland.vscode-deno\n")),(0,o.kt)("h3",{id:"deno"},"Deno"),(0,o.kt)("p",null,"Existen 2 alternativas para instalar deno:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Seguir las (instrucciones oficiales)","[https://deno.land/#installation]"," para\ninstalar el comando ",(0,o.kt)("inlineCode",{parentName:"li"},"deno")),(0,o.kt)("li",{parentName:"ol"},"Descargar el\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/denoland/deno/releases/tag/v1.18.1"},"\xfaltimo release")," desde\nel repositorio oficial de deno, descomprimir el binario en cualquier lugar y\nluego configurarlo en ./.vscode/settings.json de la siguiente manera\n(reemplazando ",(0,o.kt)("inlineCode",{parentName:"li"},"./deno")," por la ruta al binario)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mkdir .vscode\necho \'{\n    "deno.path": "./deno", /* DENO NO FUE INSTALADO SINO QUE SE DESCARG\xd3 EL BINARIO EN ESTA UBICACI\xd3N */\n    "deno.enable": true /* UTILIZAR EL LANGUAGE SERVER DE DENO EN VEZ DE TYPESCRIPT "C\xd3MUN" */\n}\' > .vscode/settings.json\n')),(0,o.kt)("h3",{id:"dependencias"},"Dependencias"),(0,o.kt)("p",null,"Deben estar disponibles los comandos ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"gcc"),"."),(0,o.kt)("p",null,"En ubuntu, gcc y flex se consiguen con el comando"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo apt install flex build-essential\n")),(0,o.kt)("h3",{id:"c\xf3mo-hacer-el-laboratorio"},"C\xf3mo hacer el laboratorio"),(0,o.kt)("p",null,"Este laboratorio se compone de 2 conjuntos de 4 ejercicios similares. Los\nejercicios numerados 00 se entregan ya resueltos como referencia."),(0,o.kt)("p",null,"El laboratorio consiste en completar los archivos ",(0,o.kt)("inlineCode",{parentName:"p"},"ex.ts")," \xf3 ",(0,o.kt)("inlineCode",{parentName:"p"},"ex.flex")," de cada\ncarpeta de forma que pasen los tests de ",(0,o.kt)("inlineCode",{parentName:"p"},"test.ts"),"."),(0,o.kt)("p",null,"Cada carpeta tiene los siguientes archivos"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tokenType.ts"),": un tipo enumerado que representa los tipos de tokens"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ex.ts")," \xf3 ",(0,o.kt)("inlineCode",{parentName:"li"},"ex.lex"),": una descripci\xf3n de un lexer. En el caso de los lexers\nmanuales, se describe un DFA de forma similar al laboratorio 1. En el caso de\nlos lexers autom\xe1ticos, se debe incluir un archivo de ",(0,o.kt)("inlineCode",{parentName:"li"},"flex")," que pueda\ncompilarse a un programa C que emita cada token en una l\xednea separada."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"test.ts"),": archivo de pruebas que deben pasar. Adem\xe1s tienen en un comentario\nla descripci\xf3n del lexer que deben escribir.")),(0,o.kt)("h4",{id:"consejos-importantes"},"Consejos importantes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Leer la introducci\xf3n te\xf3rica, es sint\xe9tica y est\xe1 pensada para facilitarles el\ndesarrollo del laboratorio."),(0,o.kt)("li",{parentName:"ul"},"Para los ejercicios manuales: La experiencia demuestra que son ",(0,o.kt)("strong",{parentName:"li"},"much\xedsimo m\xe1s\nsimples")," si escribes el diagrama del aut\xf3mata ",(0,o.kt)("strong",{parentName:"li"},"antes")," de escribir la\nfunci\xf3n de transici\xf3n."),(0,o.kt)("li",{parentName:"ul"},'Para los ejercicios autom\xe1ticos (lex/flex): en algunos ejercicios hay que\nagregar reglas adicionales para emitir errores adicionales. Algunos tokens\ninv\xe1lidos est\xe1n impl\xedcitos en la descripci\xf3n "tabular" de los lenguajes.')),(0,o.kt)("h3",{id:"criterios-de-evaluaci\xf3n"},"Criterios de evaluaci\xf3n"),(0,o.kt)("p",null,"La evaluaci\xf3n es objetiva. Al presentar el laboratorio se dar\xe1 una fecha\nrecomendada de entrega. Al entregar el laboratorio se puntuar\xe1 de la siguiente\nforma."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Par\xe1metro"),(0,o.kt)("th",{parentName:"tr",align:null},"puntaje"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"se entreg\xf3 el TP"),(0,o.kt)("td",{parentName:"tr",align:null},"6")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"El \xfaltimo commit del PR tiene fecha previa a la recomendada"),(0,o.kt)("td",{parentName:"tr",align:null},"+2")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Se agregaron 5 tests"),(0,o.kt)("td",{parentName:"tr",align:null},"+2")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Ejercicio 01 entregado antes del fin de la clase"),(0,o.kt)("td",{parentName:"tr",align:null},"+1")))))}p.isMDXComponent=!0}}]);